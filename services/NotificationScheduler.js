const cron = require('node-cron');
const Notification = require('../models/Notification');
const EmailService = require('../services/EmailService');

class NotificationScheduler {
  // D√©marrer toutes les t√¢ches automatiques
  static start() {
    console.log('üïê D√©marrage du planificateur de notifications...');
    
    // V√©rifier les retards tous les jours √† 9h00
    this.scheduleOverdueCheck();
    
    // Envoyer les rappels tous les jours √† 10h00
    this.scheduleReminders();
    
    // Nettoyer les anciennes notifications tous les dimanches √† 3h00
    this.scheduleCleanup();
  }

  // Planifier la v√©rification des retards
  static scheduleOverdueCheck() {
    // Tous les jours √† 9h00
    cron.schedule('0 9 * * *', async () => {
      console.log('üîç V√©rification des livres en retard...');
      
      try {
        const overdueBorrowings = await Notification.getOverdueBorrowings();
        
        if (overdueBorrowings.length > 0) {
          console.log(`üìß ${overdueBorrowings.length} emprunts en retard trouv√©s`);
          
          // Envoyer les emails et cr√©er les notifications
          for (const borrowing of overdueBorrowings) {
            try {
              // Envoyer l'email
              const emailSent = await EmailService.sendOverdueNotification(
                borrowing.email,
                `${borrowing.first_name} ${borrowing.last_name}`,
                borrowing.book_title,
                borrowing.days_overdue
              );
              
              if (emailSent) {
                // Cr√©er la notification dans la base
                await Notification.createEmailNotification(
                  borrowing.user_id,
                  'overdue_email',
                  borrowing.book_title,
                  borrowing.days_overdue
                );
                console.log(`‚úÖ Email de retard envoy√© √† ${borrowing.email} pour "${borrowing.book_title}"`);
              }
            } catch (error) {
              console.error(`‚ùå Erreur envoi email √† ${borrowing.email}:`, error.message);
            }
          }
        } else {
          console.log('‚úÖ Aucun livre en retard trouv√©');
        }
        
      } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification des retards:', error);
      }
    });
  }

  // Planifier les rappels
  static scheduleReminders() {
    // Tous les jours √† 10h00
    cron.schedule('0 10 * * *', async () => {
      console.log('üìù Envoi des rappels de retour...');
      
      try {
        const borrowingsDueTomorrow = await Notification.getBorrowingsDueTomorrow();
        
        if (borrowingsDueTomorrow.length > 0) {
          console.log(`üìß ${borrowingsDueTomorrow.length} rappels √† envoyer`);
          
          // Envoyer les emails et cr√©er les notifications
          for (const borrowing of borrowingsDueTomorrow) {
            try {
              // Envoyer l'email de rappel
              const emailSent = await EmailService.sendReminder(
                borrowing.email,
                `${borrowing.first_name} ${borrowing.last_name}`,
                borrowing.book_title
              );
              
              if (emailSent) {
                // Cr√©er la notification dans la base
                await Notification.createEmailNotification(
                  borrowing.user_id,
                  'reminder_email',
                  borrowing.book_title
                );
                console.log(`‚úÖ Rappel envoy√© √† ${borrowing.email} pour "${borrowing.book_title}"`);
              }
            } catch (error) {
              console.error(`‚ùå Erreur envoi rappel √† ${borrowing.email}:`, error.message);
            }
          }
        } else {
          console.log('‚úÖ Aucun rappel √† envoyer');
        }
        
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi des rappels:', error);
      }
    });
  }

  // Planifier le nettoyage
  static scheduleCleanup() {
    // Tous les dimanches √† 3h00
    cron.schedule('0 3 * * 0', async () => {
      console.log('üßπ Nettoyage des anciennes notifications...');
      
      try {
        // Supprimer les notifications lues de plus de 30 jours
        const { executeQuery } = require('../config/database');
        const result = await executeQuery(`
          DELETE FROM notifications 
          WHERE is_read = TRUE 
          AND created_at < DATE_SUB(NOW(), INTERVAL 30 DAY)
        `);
        
        console.log(`üóëÔ∏è ${result.affectedRows} anciennes notifications supprim√©es`);
        
      } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error);
      }
    });
  }

  // Ex√©cuter manuellement la v√©rification des retards (pour tests)
  static async checkOverdueNow() {
    console.log('üîç V√©rification manuelle des retards...');
    
    try {
      const overdueNotifications = await Notification.createOverdueNotifications();
      return overdueNotifications;
    } catch (error) {
      console.error('‚ùå Erreur:', error);
      throw error;
    }
  }

  // Ex√©cuter manuellement les rappels (pour tests)
  static async sendRemindersNow() {
    console.log('üìù Envoi manuel des rappels...');
    
    try {
      const reminderNotifications = await Notification.createReminderNotifications();
      return reminderNotifications;
    } catch (error) {
      console.error('‚ùå Erreur:', error);
      throw error;
    }
  }
  
  // M√©thode pour tester les notifications manuellement (utile pour le d√©veloppement)
  static async runOverdueCheckNow() {
    console.log('üîç Test manuel: V√©rification des livres en retard...');
    
    try {
      const overdueBorrowings = await Notification.getOverdueBorrowings();
      
      if (overdueBorrowings.length > 0) {
        console.log(`üìß ${overdueBorrowings.length} emprunts en retard trouv√©s`);
        
        for (const borrowing of overdueBorrowings) {
          console.log(`- ${borrowing.first_name} ${borrowing.last_name}: "${borrowing.book_title}" (${borrowing.days_overdue} jours de retard)`);
          
          // Envoyer l'email
          const emailSent = await EmailService.sendOverdueNotification(
            borrowing.email,
            `${borrowing.first_name} ${borrowing.last_name}`,
            borrowing.book_title,
            borrowing.days_overdue
          );
          
          if (emailSent) {
            // Cr√©er la notification
            await Notification.createEmailNotification(
              borrowing.user_id,
              'overdue_email',
              borrowing.book_title,
              borrowing.days_overdue
            );
          }
        }
      } else {
        console.log('‚úÖ Aucun livre en retard trouv√©');
      }
      
      return overdueBorrowings;
    } catch (error) {
      console.error('‚ùå Erreur lors du test:', error);
      throw error;
    }
  }

  // M√©thode pour tester les rappels manuellement
  static async runReminderCheckNow() {
    console.log('üìù Test manuel: Envoi des rappels...');
    
    try {
      const borrowingsDueTomorrow = await Notification.getBorrowingsDueTomorrow();
      
      if (borrowingsDueTomorrow.length > 0) {
        console.log(`üìß ${borrowingsDueTomorrow.length} rappels √† envoyer`);
        
        for (const borrowing of borrowingsDueTomorrow) {
          console.log(`- ${borrowing.first_name} ${borrowing.last_name}: "${borrowing.book_title}" (√©ch√©ance demain)`);
          
          // Envoyer l'email
          const emailSent = await EmailService.sendReminder(
            borrowing.email,
            `${borrowing.first_name} ${borrowing.last_name}`,
            borrowing.book_title
          );
          
          if (emailSent) {
            // Cr√©er la notification
            await Notification.createEmailNotification(
              borrowing.user_id,
              'reminder_email',
              borrowing.book_title
            );
          }
        }
      } else {
        console.log('‚úÖ Aucun rappel √† envoyer');
      }
      
      return borrowingsDueTomorrow;
    } catch (error) {
      console.error('‚ùå Erreur lors du test:', error);
      throw error;
    }
  }
}

module.exports = NotificationScheduler;
